package jona.Heroes;

import jona.Heroes.Damage.*;
import jona.Heroes.Supports.*;
import jona.Heroes.Tanks.*;
import jona.Utils.ArrayUtil;
import jona.Utils.DataNames;

import java.util.ArrayList;

public class FactorySettings {
    public static HeroSpecific createHero(String name, String className, ArrayList<Object> averageData, ArrayList<Object> gameData){
        if (className.equals("supports")){  return createSupport(name, averageData, gameData);  }
        else if (className.equals("damage")) {  return createDamage(name, averageData, gameData);   }
        else if (className.equals("tanks")) {    return createTank(name, averageData, gameData); }
        else {  return null;    }
    }

    public static HeroSpecific createSupport(String name, ArrayList<Object> averageData, ArrayList<Object> gameData){
        switch (name){
            case "illari" -> { return new Illari(name, ArrayUtil.obtainFloatValue(averageData, DataNames.critHits), ArrayUtil.obtainFloatValue(averageData, DataNames.critKills), ArrayUtil.obtainFloatValue(averageData, DataNames.deaths), ArrayUtil.obtainFloatValue(averageData, DataNames.damage), ArrayUtil.obtainFloatValue(averageData, DataNames.kills), ArrayUtil.obtainFloatValue(averageData, DataNames.assists), ArrayUtil.obtainFloatValue(averageData, DataNames.healingDone), ArrayUtil.obtainFloatValue(averageData, DataNames.elimsPerLife), ArrayUtil.obtainTimeValue(gameData, DataNames.timePlayed), ArrayUtil.obtainIntValue(gameData, DataNames.gamesPlayed), ArrayUtil.obtainIntValue(gameData, DataNames.wins), ArrayUtil.obtainIntValue(gameData, DataNames.losses)); }
            case "ana" -> { return new Ana(name, ArrayUtil.obtainFloatValue(averageData, DataNames.deaths), ArrayUtil.obtainFloatValue(averageData, DataNames.damage), ArrayUtil.obtainFloatValue(averageData, DataNames.kills), ArrayUtil.obtainFloatValue(averageData, DataNames.assists), ArrayUtil.obtainFloatValue(averageData, DataNames.healingDone), ArrayUtil.obtainFloatValue(averageData, DataNames.elimsPerLife), ArrayUtil.obtainTimeValue(gameData, DataNames.timePlayed), ArrayUtil.obtainIntValue(gameData, DataNames.gamesPlayed), ArrayUtil.obtainIntValue(gameData, DataNames.wins), ArrayUtil.obtainIntValue(gameData, DataNames.losses)); }
            case "baptiste" -> { return new Baptiste(name, ArrayUtil.obtainFloatValue(averageData, DataNames.critHits), ArrayUtil.obtainFloatValue(averageData, DataNames.critKills), ArrayUtil.obtainFloatValue(averageData, DataNames.deaths), ArrayUtil.obtainFloatValue(averageData, DataNames.damage), ArrayUtil.obtainFloatValue(averageData, DataNames.kills), ArrayUtil.obtainFloatValue(averageData, DataNames.assists), ArrayUtil.obtainFloatValue(averageData, DataNames.healingDone), ArrayUtil.obtainFloatValue(averageData, DataNames.elimsPerLife), ArrayUtil.obtainTimeValue(gameData, DataNames.timePlayed), ArrayUtil.obtainIntValue(gameData, DataNames.gamesPlayed), ArrayUtil.obtainIntValue(gameData, DataNames.wins), ArrayUtil.obtainIntValue(gameData, DataNames.losses)); }
            case "brigitte" -> { return new Brigitte(name, ArrayUtil.obtainFloatValue(averageData, DataNames.deaths), ArrayUtil.obtainFloatValue(averageData, DataNames.damage), ArrayUtil.obtainFloatValue(averageData, DataNames.kills), ArrayUtil.obtainFloatValue(averageData, DataNames.assists), ArrayUtil.obtainFloatValue(averageData, DataNames.healingDone), ArrayUtil.obtainFloatValue(averageData, DataNames.elimsPerLife), ArrayUtil.obtainTimeValue(gameData, DataNames.timePlayed), ArrayUtil.obtainIntValue(gameData, DataNames.gamesPlayed), ArrayUtil.obtainIntValue(gameData, DataNames.wins), ArrayUtil.obtainIntValue(gameData, DataNames.losses)); }
            case "kiriko" -> { return new Kiriko(name, ArrayUtil.obtainFloatValue(averageData, DataNames.critHits), ArrayUtil.obtainFloatValue(averageData, DataNames.critKills), ArrayUtil.obtainFloatValue(averageData, DataNames.deaths), ArrayUtil.obtainFloatValue(averageData, DataNames.damage), ArrayUtil.obtainFloatValue(averageData, DataNames.kills), ArrayUtil.obtainFloatValue(averageData, DataNames.assists), ArrayUtil.obtainFloatValue(averageData, DataNames.healingDone), ArrayUtil.obtainFloatValue(averageData, DataNames.elimsPerLife), ArrayUtil.obtainTimeValue(gameData, DataNames.timePlayed), ArrayUtil.obtainIntValue(gameData, DataNames.gamesPlayed), ArrayUtil.obtainIntValue(gameData, DataNames.wins), ArrayUtil.obtainIntValue(gameData, DataNames.losses)); }
            case "lifeweaver" -> { return new Lifeweaver(name, ArrayUtil.obtainFloatValue(averageData, DataNames.critHits), ArrayUtil.obtainFloatValue(averageData, DataNames.critKills), ArrayUtil.obtainFloatValue(averageData, DataNames.deaths), ArrayUtil.obtainFloatValue(averageData, DataNames.damage), ArrayUtil.obtainFloatValue(averageData, DataNames.kills), ArrayUtil.obtainFloatValue(averageData, DataNames.assists), ArrayUtil.obtainFloatValue(averageData, DataNames.healingDone), ArrayUtil.obtainFloatValue(averageData, DataNames.elimsPerLife), ArrayUtil.obtainTimeValue(gameData, DataNames.timePlayed), ArrayUtil.obtainIntValue(gameData, DataNames.gamesPlayed), ArrayUtil.obtainIntValue(gameData, DataNames.wins), ArrayUtil.obtainIntValue(gameData, DataNames.losses)); }
            case "lÃºcio" -> { return new Lucio(name, ArrayUtil.obtainFloatValue(averageData, DataNames.critHits), ArrayUtil.obtainFloatValue(averageData, DataNames.deaths), ArrayUtil.obtainFloatValue(averageData, DataNames.damage), ArrayUtil.obtainFloatValue(averageData, DataNames.kills), ArrayUtil.obtainFloatValue(averageData, DataNames.assists), ArrayUtil.obtainFloatValue(averageData, DataNames.healingDone), ArrayUtil.obtainFloatValue(averageData, DataNames.elimsPerLife), ArrayUtil.obtainTimeValue(gameData, DataNames.timePlayed), ArrayUtil.obtainIntValue(gameData, DataNames.gamesPlayed), ArrayUtil.obtainIntValue(gameData, DataNames.wins), ArrayUtil.obtainIntValue(gameData, DataNames.losses)); }
            case "mercy" -> { return new Mercy(name, ArrayUtil.obtainFloatValue(averageData, DataNames.deaths), ArrayUtil.obtainFloatValue(averageData, DataNames.damage), ArrayUtil.obtainFloatValue(averageData, DataNames.kills), ArrayUtil.obtainFloatValue(averageData, DataNames.assists), ArrayUtil.obtainFloatValue(averageData, DataNames.healingDone), ArrayUtil.obtainFloatValue(averageData, DataNames.elimsPerLife), ArrayUtil.obtainTimeValue(gameData, DataNames.timePlayed), ArrayUtil.obtainIntValue(gameData, DataNames.gamesPlayed), ArrayUtil.obtainIntValue(gameData, DataNames.wins), ArrayUtil.obtainIntValue(gameData, DataNames.losses)); }
            case "moira" -> { return new Moira(name, ArrayUtil.obtainFloatValue(averageData, DataNames.deaths), ArrayUtil.obtainFloatValue(averageData, DataNames.damage), ArrayUtil.obtainFloatValue(averageData, DataNames.kills), ArrayUtil.obtainFloatValue(averageData, DataNames.assists), ArrayUtil.obtainFloatValue(averageData, DataNames.healingDone), ArrayUtil.obtainFloatValue(averageData, DataNames.elimsPerLife), ArrayUtil.obtainTimeValue(gameData, DataNames.timePlayed), ArrayUtil.obtainIntValue(gameData, DataNames.gamesPlayed), ArrayUtil.obtainIntValue(gameData, DataNames.wins), ArrayUtil.obtainIntValue(gameData, DataNames.losses)); }
            case "zenyatta" -> { return new Zenyatta(name, ArrayUtil.obtainFloatValue(averageData, DataNames.critHits), ArrayUtil.obtainFloatValue(averageData, DataNames.deaths), ArrayUtil.obtainFloatValue(averageData, DataNames.damage), ArrayUtil.obtainFloatValue(averageData, DataNames.kills), ArrayUtil.obtainFloatValue(averageData, DataNames.assists), ArrayUtil.obtainFloatValue(averageData, DataNames.healingDone), ArrayUtil.obtainFloatValue(averageData, DataNames.elimsPerLife), ArrayUtil.obtainTimeValue(gameData, DataNames.timePlayed), ArrayUtil.obtainIntValue(gameData, DataNames.gamesPlayed), ArrayUtil.obtainIntValue(gameData, DataNames.wins), ArrayUtil.obtainIntValue(gameData, DataNames.losses)); }
            default -> System.out.println("No characters have been found in the support class");
        }
        return null;
    }

    public static HeroSpecific createDamage(String name, ArrayList<Object> averageData, ArrayList<Object> gameData){
        switch (name){
            case "ashe" -> { return new Ashe(name, ArrayUtil.obtainFloatValue(averageData, DataNames.critHits), ArrayUtil.obtainFloatValue(averageData, DataNames.critKills), ArrayUtil.obtainFloatValue(averageData, DataNames.deaths), ArrayUtil.obtainFloatValue(averageData, DataNames.damage), ArrayUtil.obtainFloatValue(averageData, DataNames.kills), ArrayUtil.obtainFloatValue(averageData, DataNames.assists), ArrayUtil.obtainFloatValue(averageData, DataNames.elimsPerLife), ArrayUtil.obtainTimeValue(gameData, DataNames.timePlayed), ArrayUtil.obtainIntValue(gameData, DataNames.gamesPlayed), ArrayUtil.obtainIntValue(gameData, DataNames.wins), ArrayUtil.obtainIntValue(gameData, DataNames.losses)); }
            case "bastion" -> { return new Bastion(name, ArrayUtil.obtainFloatValue(averageData, DataNames.critHits), ArrayUtil.obtainFloatValue(averageData, DataNames.critKills), ArrayUtil.obtainFloatValue(averageData, DataNames.deaths), ArrayUtil.obtainFloatValue(averageData, DataNames.damage), ArrayUtil.obtainFloatValue(averageData, DataNames.kills), ArrayUtil.obtainFloatValue(averageData, DataNames.assists), ArrayUtil.obtainFloatValue(averageData, DataNames.elimsPerLife), ArrayUtil.obtainTimeValue(gameData, DataNames.timePlayed), ArrayUtil.obtainIntValue(gameData, DataNames.gamesPlayed), ArrayUtil.obtainIntValue(gameData, DataNames.wins), ArrayUtil.obtainIntValue(gameData, DataNames.losses)); }
            case "cassidy" -> { return new Cassidy(name, ArrayUtil.obtainFloatValue(averageData, DataNames.critHits), ArrayUtil.obtainFloatValue(averageData, DataNames.critKills), ArrayUtil.obtainFloatValue(averageData, DataNames.deaths), ArrayUtil.obtainFloatValue(averageData, DataNames.damage), ArrayUtil.obtainFloatValue(averageData, DataNames.kills), ArrayUtil.obtainFloatValue(averageData, DataNames.assists), ArrayUtil.obtainFloatValue(averageData, DataNames.elimsPerLife), ArrayUtil.obtainTimeValue(gameData, DataNames.timePlayed), ArrayUtil.obtainIntValue(gameData, DataNames.gamesPlayed), ArrayUtil.obtainIntValue(gameData, DataNames.wins), ArrayUtil.obtainIntValue(gameData, DataNames.losses)); }
            case "echo" -> { return new Echo(name, ArrayUtil.obtainFloatValue(averageData, DataNames.critHits), ArrayUtil.obtainFloatValue(averageData, DataNames.deaths), ArrayUtil.obtainFloatValue(averageData, DataNames.damage), ArrayUtil.obtainFloatValue(averageData, DataNames.kills), ArrayUtil.obtainFloatValue(averageData, DataNames.assists), ArrayUtil.obtainFloatValue(averageData, DataNames.elimsPerLife), ArrayUtil.obtainTimeValue(gameData, DataNames.timePlayed), ArrayUtil.obtainIntValue(gameData, DataNames.gamesPlayed), ArrayUtil.obtainIntValue(gameData, DataNames.wins), ArrayUtil.obtainIntValue(gameData, DataNames.losses)); }
            case "genji" -> { return new Genji(name, ArrayUtil.obtainFloatValue(averageData, DataNames.critHits), ArrayUtil.obtainFloatValue(averageData, DataNames.critKills), ArrayUtil.obtainFloatValue(averageData, DataNames.deaths), ArrayUtil.obtainFloatValue(averageData, DataNames.damage), ArrayUtil.obtainFloatValue(averageData, DataNames.kills), ArrayUtil.obtainFloatValue(averageData, DataNames.assists), ArrayUtil.obtainFloatValue(averageData, DataNames.elimsPerLife), ArrayUtil.obtainTimeValue(gameData, DataNames.timePlayed), ArrayUtil.obtainIntValue(gameData, DataNames.gamesPlayed), ArrayUtil.obtainIntValue(gameData, DataNames.wins), ArrayUtil.obtainIntValue(gameData, DataNames.losses)); }
            case "hanzo" -> { return new Hanzo(name, ArrayUtil.obtainFloatValue(averageData, DataNames.critHits), ArrayUtil.obtainFloatValue(averageData, DataNames.critKills), ArrayUtil.obtainFloatValue(averageData, DataNames.deaths), ArrayUtil.obtainFloatValue(averageData, DataNames.damage), ArrayUtil.obtainFloatValue(averageData, DataNames.kills), ArrayUtil.obtainFloatValue(averageData, DataNames.assists), ArrayUtil.obtainFloatValue(averageData, DataNames.elimsPerLife), ArrayUtil.obtainTimeValue(gameData, DataNames.timePlayed), ArrayUtil.obtainIntValue(gameData, DataNames.gamesPlayed), ArrayUtil.obtainIntValue(gameData, DataNames.wins), ArrayUtil.obtainIntValue(gameData, DataNames.losses)); }
            case "junkrat" -> { return new Junkrat(name, ArrayUtil.obtainFloatValue(averageData, DataNames.deaths), ArrayUtil.obtainFloatValue(averageData, DataNames.damage), ArrayUtil.obtainFloatValue(averageData, DataNames.kills), ArrayUtil.obtainFloatValue(averageData, DataNames.assists), ArrayUtil.obtainFloatValue(averageData, DataNames.elimsPerLife), ArrayUtil.obtainTimeValue(gameData, DataNames.timePlayed), ArrayUtil.obtainIntValue(gameData, DataNames.gamesPlayed), ArrayUtil.obtainIntValue(gameData, DataNames.wins), ArrayUtil.obtainIntValue(gameData, DataNames.losses)); }
            case "torbjÃ¶rn" -> { return new Torbjorn(name, ArrayUtil.obtainFloatValue(averageData, DataNames.critHits), ArrayUtil.obtainFloatValue(averageData, DataNames.critKills), ArrayUtil.obtainFloatValue(averageData, DataNames.deaths), ArrayUtil.obtainFloatValue(averageData, DataNames.damage), ArrayUtil.obtainFloatValue(averageData, DataNames.kills), ArrayUtil.obtainFloatValue(averageData, DataNames.assists), ArrayUtil.obtainFloatValue(averageData, DataNames.elimsPerLife), ArrayUtil.obtainTimeValue(gameData, DataNames.timePlayed), ArrayUtil.obtainIntValue(gameData, DataNames.gamesPlayed), ArrayUtil.obtainIntValue(gameData, DataNames.wins), ArrayUtil.obtainIntValue(gameData, DataNames.losses)); }
            case "pharah" -> { return new Pharah(name, ArrayUtil.obtainFloatValue(averageData, DataNames.deaths), ArrayUtil.obtainFloatValue(averageData, DataNames.damage), ArrayUtil.obtainFloatValue(averageData, DataNames.kills), ArrayUtil.obtainFloatValue(averageData, DataNames.assists), ArrayUtil.obtainFloatValue(averageData, DataNames.elimsPerLife), ArrayUtil.obtainTimeValue(gameData, DataNames.timePlayed), ArrayUtil.obtainIntValue(gameData, DataNames.gamesPlayed), ArrayUtil.obtainIntValue(gameData, DataNames.wins), ArrayUtil.obtainIntValue(gameData, DataNames.losses)); }
            case "reaper" -> { return new Reaper(name, ArrayUtil.obtainFloatValue(averageData, DataNames.critHits), ArrayUtil.obtainFloatValue(averageData, DataNames.critKills), ArrayUtil.obtainFloatValue(averageData, DataNames.deaths), ArrayUtil.obtainFloatValue(averageData, DataNames.damage), ArrayUtil.obtainFloatValue(averageData, DataNames.kills), ArrayUtil.obtainFloatValue(averageData, DataNames.assists), ArrayUtil.obtainFloatValue(averageData, DataNames.elimsPerLife), ArrayUtil.obtainTimeValue(gameData, DataNames.timePlayed), ArrayUtil.obtainIntValue(gameData, DataNames.gamesPlayed), ArrayUtil.obtainIntValue(gameData, DataNames.wins), ArrayUtil.obtainIntValue(gameData, DataNames.losses)); }
            case "sojourn" -> { return new Sojourn(name, ArrayUtil.obtainFloatValue(averageData, DataNames.deaths), ArrayUtil.obtainFloatValue(averageData, DataNames.damage), ArrayUtil.obtainFloatValue(averageData, DataNames.kills), ArrayUtil.obtainFloatValue(averageData, DataNames.assists), ArrayUtil.obtainFloatValue(averageData, DataNames.elimsPerLife), ArrayUtil.obtainTimeValue(gameData, DataNames.timePlayed), ArrayUtil.obtainIntValue(gameData, DataNames.gamesPlayed), ArrayUtil.obtainIntValue(gameData, DataNames.wins), ArrayUtil.obtainIntValue(gameData, DataNames.losses)); }
            case "soldier: 76" -> { return new Soldier76(name, ArrayUtil.obtainFloatValue(averageData, DataNames.critHits), ArrayUtil.obtainFloatValue(averageData, DataNames.critKills), ArrayUtil.obtainFloatValue(averageData, DataNames.deaths), ArrayUtil.obtainFloatValue(averageData, DataNames.damage), ArrayUtil.obtainFloatValue(averageData, DataNames.kills), ArrayUtil.obtainFloatValue(averageData, DataNames.assists), ArrayUtil.obtainFloatValue(averageData, DataNames.elimsPerLife), ArrayUtil.obtainTimeValue(gameData, DataNames.timePlayed), ArrayUtil.obtainIntValue(gameData, DataNames.gamesPlayed), ArrayUtil.obtainIntValue(gameData, DataNames.wins), ArrayUtil.obtainIntValue(gameData, DataNames.losses)); }
            case "sombra" -> { return new Sombra(name, ArrayUtil.obtainFloatValue(averageData, DataNames.critHits), ArrayUtil.obtainFloatValue(averageData, DataNames.critKills), ArrayUtil.obtainFloatValue(averageData, DataNames.deaths), ArrayUtil.obtainFloatValue(averageData, DataNames.damage), ArrayUtil.obtainFloatValue(averageData, DataNames.kills), ArrayUtil.obtainFloatValue(averageData, DataNames.assists), ArrayUtil.obtainFloatValue(averageData, DataNames.elimsPerLife), ArrayUtil.obtainTimeValue(gameData, DataNames.timePlayed), ArrayUtil.obtainIntValue(gameData, DataNames.gamesPlayed), ArrayUtil.obtainIntValue(gameData, DataNames.wins), ArrayUtil.obtainIntValue(gameData, DataNames.losses)); }
            case "symmetra" -> { return new Symmetra(name, ArrayUtil.obtainFloatValue(averageData, DataNames.deaths), ArrayUtil.obtainFloatValue(averageData, DataNames.damage), ArrayUtil.obtainFloatValue(averageData, DataNames.kills), ArrayUtil.obtainFloatValue(averageData, DataNames.assists), ArrayUtil.obtainFloatValue(averageData, DataNames.elimsPerLife), ArrayUtil.obtainTimeValue(gameData, DataNames.timePlayed), ArrayUtil.obtainIntValue(gameData, DataNames.gamesPlayed), ArrayUtil.obtainIntValue(gameData, DataNames.wins), ArrayUtil.obtainIntValue(gameData, DataNames.losses)); }
            case "mei" -> { return new Mei(name, ArrayUtil.obtainFloatValue(averageData, DataNames.critHits), ArrayUtil.obtainFloatValue(averageData, DataNames.deaths), ArrayUtil.obtainFloatValue(averageData, DataNames.damage), ArrayUtil.obtainFloatValue(averageData, DataNames.kills), ArrayUtil.obtainFloatValue(averageData, DataNames.assists), ArrayUtil.obtainFloatValue(averageData, DataNames.elimsPerLife), ArrayUtil.obtainTimeValue(gameData, DataNames.timePlayed), ArrayUtil.obtainIntValue(gameData, DataNames.gamesPlayed), ArrayUtil.obtainIntValue(gameData, DataNames.wins), ArrayUtil.obtainIntValue(gameData, DataNames.losses)); }
            case "tracer" -> { return new Tracer(name, ArrayUtil.obtainFloatValue(averageData, DataNames.critHits), ArrayUtil.obtainFloatValue(averageData, DataNames.critKills), ArrayUtil.obtainFloatValue(averageData, DataNames.deaths), ArrayUtil.obtainFloatValue(averageData, DataNames.damage), ArrayUtil.obtainFloatValue(averageData, DataNames.kills), ArrayUtil.obtainFloatValue(averageData, DataNames.assists), ArrayUtil.obtainFloatValue(averageData, DataNames.elimsPerLife), ArrayUtil.obtainTimeValue(gameData, DataNames.timePlayed), ArrayUtil.obtainIntValue(gameData, DataNames.gamesPlayed), ArrayUtil.obtainIntValue(gameData, DataNames.wins), ArrayUtil.obtainIntValue(gameData, DataNames.losses)); }
            case "widowmaker" -> { return new Widowmaker(name, ArrayUtil.obtainFloatValue(averageData, DataNames.critHits), ArrayUtil.obtainFloatValue(averageData, DataNames.critKills), ArrayUtil.obtainFloatValue(averageData, DataNames.deaths), ArrayUtil.obtainFloatValue(averageData, DataNames.damage), ArrayUtil.obtainFloatValue(averageData, DataNames.kills), ArrayUtil.obtainFloatValue(averageData, DataNames.assists), ArrayUtil.obtainFloatValue(averageData, DataNames.elimsPerLife), ArrayUtil.obtainTimeValue(gameData, DataNames.timePlayed), ArrayUtil.obtainIntValue(gameData, DataNames.gamesPlayed), ArrayUtil.obtainIntValue(gameData, DataNames.wins), ArrayUtil.obtainIntValue(gameData, DataNames.losses)); }
            default -> System.out.println("No characters have been found in the support class");
        }
        return null;
    }

    public static HeroSpecific createTank(String name, ArrayList<Object> averageData, ArrayList<Object> gameData){
        switch (name){
            case "d.va" -> { return new Dva(name, ArrayUtil.obtainFloatValue(averageData, DataNames.critHits), ArrayUtil.obtainFloatValue(averageData, DataNames.critKills), ArrayUtil.obtainFloatValue(averageData, DataNames.deaths), ArrayUtil.obtainFloatValue(averageData, DataNames.damage), ArrayUtil.obtainFloatValue(averageData, DataNames.kills), ArrayUtil.obtainFloatValue(averageData, DataNames.assists), ArrayUtil.obtainFloatValue(averageData, DataNames.elimsPerLife), ArrayUtil.obtainTimeValue(gameData, DataNames.timePlayed), ArrayUtil.obtainIntValue(gameData, DataNames.gamesPlayed), ArrayUtil.obtainIntValue(gameData, DataNames.wins), ArrayUtil.obtainIntValue(gameData, DataNames.losses)); }
            case "doomfist" -> { return new Doomfist(name, ArrayUtil.obtainFloatValue(averageData, DataNames.critHits), ArrayUtil.obtainFloatValue(averageData, DataNames.critKills), ArrayUtil.obtainFloatValue(averageData, DataNames.deaths), ArrayUtil.obtainFloatValue(averageData, DataNames.damage), ArrayUtil.obtainFloatValue(averageData, DataNames.kills), ArrayUtil.obtainFloatValue(averageData, DataNames.assists), ArrayUtil.obtainFloatValue(averageData, DataNames.elimsPerLife), ArrayUtil.obtainTimeValue(gameData, DataNames.timePlayed), ArrayUtil.obtainIntValue(gameData, DataNames.gamesPlayed), ArrayUtil.obtainIntValue(gameData, DataNames.wins), ArrayUtil.obtainIntValue(gameData, DataNames.losses)); }
            case "junker queen" -> { return new JunkerQueen(name, ArrayUtil.obtainFloatValue(averageData, DataNames.deaths), ArrayUtil.obtainFloatValue(averageData, DataNames.damage), ArrayUtil.obtainFloatValue(averageData, DataNames.kills), ArrayUtil.obtainFloatValue(averageData, DataNames.assists), ArrayUtil.obtainFloatValue(averageData, DataNames.healingDone), ArrayUtil.obtainFloatValue(averageData, DataNames.elimsPerLife), ArrayUtil.obtainTimeValue(gameData, DataNames.timePlayed), ArrayUtil.obtainIntValue(gameData, DataNames.gamesPlayed), ArrayUtil.obtainIntValue(gameData, DataNames.wins), ArrayUtil.obtainIntValue(gameData, DataNames.losses)); }
            case "orisa" -> { return new Orisa(name, ArrayUtil.obtainFloatValue(averageData, DataNames.deaths), ArrayUtil.obtainFloatValue(averageData, DataNames.damage), ArrayUtil.obtainFloatValue(averageData, DataNames.kills), ArrayUtil.obtainFloatValue(averageData, DataNames.assists), ArrayUtil.obtainFloatValue(averageData, DataNames.elimsPerLife), ArrayUtil.obtainTimeValue(gameData, DataNames.timePlayed), ArrayUtil.obtainIntValue(gameData, DataNames.gamesPlayed), ArrayUtil.obtainIntValue(gameData, DataNames.wins), ArrayUtil.obtainIntValue(gameData, DataNames.losses)); }
            case "ramattra" -> { return new Ramattra(name, ArrayUtil.obtainFloatValue(averageData, DataNames.critHits), ArrayUtil.obtainFloatValue(averageData, DataNames.critKills), ArrayUtil.obtainFloatValue(averageData, DataNames.deaths), ArrayUtil.obtainFloatValue(averageData, DataNames.damage), ArrayUtil.obtainFloatValue(averageData, DataNames.kills), ArrayUtil.obtainFloatValue(averageData, DataNames.assists), ArrayUtil.obtainFloatValue(averageData, DataNames.elimsPerLife), ArrayUtil.obtainTimeValue(gameData, DataNames.timePlayed), ArrayUtil.obtainIntValue(gameData, DataNames.gamesPlayed), ArrayUtil.obtainIntValue(gameData, DataNames.wins), ArrayUtil.obtainIntValue(gameData, DataNames.losses)); }
            case "reinhardt" -> { return new Reinhardt(name, ArrayUtil.obtainFloatValue(averageData, DataNames.deaths), ArrayUtil.obtainFloatValue(averageData, DataNames.damage), ArrayUtil.obtainFloatValue(averageData, DataNames.kills), ArrayUtil.obtainFloatValue(averageData, DataNames.assists), ArrayUtil.obtainFloatValue(averageData, DataNames.elimsPerLife), ArrayUtil.obtainTimeValue(gameData, DataNames.timePlayed), ArrayUtil.obtainIntValue(gameData, DataNames.gamesPlayed), ArrayUtil.obtainIntValue(gameData, DataNames.wins), ArrayUtil.obtainIntValue(gameData, DataNames.losses)); }
            case "roadhog" -> { return new Roadhog(name, ArrayUtil.obtainFloatValue(averageData, DataNames.critHits), ArrayUtil.obtainFloatValue(averageData, DataNames.critKills), ArrayUtil.obtainFloatValue(averageData, DataNames.deaths), ArrayUtil.obtainFloatValue(averageData, DataNames.damage), ArrayUtil.obtainFloatValue(averageData, DataNames.kills), ArrayUtil.obtainFloatValue(averageData, DataNames.assists), ArrayUtil.obtainFloatValue(averageData, DataNames.elimsPerLife), ArrayUtil.obtainTimeValue(gameData, DataNames.timePlayed), ArrayUtil.obtainIntValue(gameData, DataNames.gamesPlayed), ArrayUtil.obtainIntValue(gameData, DataNames.wins), ArrayUtil.obtainIntValue(gameData, DataNames.losses)); }
            case "sigma" -> { return new Sigma(name, ArrayUtil.obtainFloatValue(averageData, DataNames.deaths), ArrayUtil.obtainFloatValue(averageData, DataNames.damage), ArrayUtil.obtainFloatValue(averageData, DataNames.kills), ArrayUtil.obtainFloatValue(averageData, DataNames.assists), ArrayUtil.obtainFloatValue(averageData, DataNames.elimsPerLife), ArrayUtil.obtainTimeValue(gameData, DataNames.timePlayed), ArrayUtil.obtainIntValue(gameData, DataNames.gamesPlayed), ArrayUtil.obtainIntValue(gameData, DataNames.wins), ArrayUtil.obtainIntValue(gameData, DataNames.losses)); }
            case "winston" -> { return new Winston(name, ArrayUtil.obtainFloatValue(averageData, DataNames.deaths), ArrayUtil.obtainFloatValue(averageData, DataNames.damage), ArrayUtil.obtainFloatValue(averageData, DataNames.kills), ArrayUtil.obtainFloatValue(averageData, DataNames.assists), ArrayUtil.obtainFloatValue(averageData, DataNames.elimsPerLife), ArrayUtil.obtainTimeValue(gameData, DataNames.timePlayed), ArrayUtil.obtainIntValue(gameData, DataNames.gamesPlayed), ArrayUtil.obtainIntValue(gameData, DataNames.wins), ArrayUtil.obtainIntValue(gameData, DataNames.losses)); }
            case "wrecking ball" -> { return new WreckingBall(name, ArrayUtil.obtainFloatValue(averageData, DataNames.critHits), ArrayUtil.obtainFloatValue(averageData, DataNames.deaths), ArrayUtil.obtainFloatValue(averageData, DataNames.damage), ArrayUtil.obtainFloatValue(averageData, DataNames.kills), ArrayUtil.obtainFloatValue(averageData, DataNames.assists), ArrayUtil.obtainFloatValue(averageData, DataNames.elimsPerLife), ArrayUtil.obtainTimeValue(gameData, DataNames.timePlayed), ArrayUtil.obtainIntValue(gameData, DataNames.gamesPlayed), ArrayUtil.obtainIntValue(gameData, DataNames.wins), ArrayUtil.obtainIntValue(gameData, DataNames.losses)); }
            case "zarya" -> { return new Zarya(name, ArrayUtil.obtainFloatValue(averageData, DataNames.deaths), ArrayUtil.obtainFloatValue(averageData, DataNames.damage), ArrayUtil.obtainFloatValue(averageData, DataNames.kills), ArrayUtil.obtainFloatValue(averageData, DataNames.assists), ArrayUtil.obtainFloatValue(averageData, DataNames.elimsPerLife), ArrayUtil.obtainTimeValue(gameData, DataNames.timePlayed), ArrayUtil.obtainIntValue(gameData, DataNames.gamesPlayed), ArrayUtil.obtainIntValue(gameData, DataNames.wins), ArrayUtil.obtainIntValue(gameData, DataNames.losses)); }
            default -> System.out.println("No characters have been found in the support class");
        }
        return null;
    }
}
